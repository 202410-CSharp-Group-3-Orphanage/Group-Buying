// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Forestage.Models.EFModels;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeRoleRel> EmployeeRoleRels { get; set; }

    public virtual DbSet<Function> Functions { get; set; }

    public virtual DbSet<GroupBuying> GroupBuyings { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RoleFunctionRel> RoleFunctionRels { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<Wish> Wishes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Cart>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasComment("數量");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.GroupBuying).WithMany(p => p.Carts)
                .HasForeignKey(d => d.GroupBuyingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Carts_GroupBuyings");

            entity.HasOne(d => d.Member).WithMany(p => p.Carts)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Carts_Members");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DisplayOrder).HasComment("顯示順序");
            entity.Property(e => e.Enabled).HasComment("是否啟用");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("分類名稱");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("帳號");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.EncryptedPassword)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("加密後密碼");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(5)
                .HasComment("姓名");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmployeeRoleRel>(entity =>
        {
            entity.ToTable("Employee_Role_Rel");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeRoleRels)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_Role_Rel_Employees");

            entity.HasOne(d => d.Role).WithMany(p => p.EmployeeRoleRels)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_Role_Rel_Roles");
        });

        modelBuilder.Entity<Function>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("功能名稱");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<GroupBuying>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasComment("團購說明");
            entity.Property(e => e.Enabled).HasComment("是否上架");
            entity.Property(e => e.EndDate)
                .HasComment("結束時間")
                .HasColumnType("datetime");
            entity.Property(e => e.MinimumGroupSize).HasComment("最小成團人數");
            entity.Property(e => e.Price).HasComment("團購價格");
            entity.Property(e => e.StartDate)
                .HasComment("開始時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Product).WithMany(p => p.GroupBuyings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GroupBuyings_Products");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("帳號");
            entity.Property(e => e.Birthday)
                .HasComment("生日")
                .HasColumnType("datetime");
            entity.Property(e => e.ConfirmCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("驗證碼");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("電子信箱");
            entity.Property(e => e.EncryptedPassword)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("加密後密碼");
            entity.Property(e => e.Gender).HasComment("性別(0:女,1:男)");
            entity.Property(e => e.IsConfirmed).HasComment("是否通過驗證");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(5)
                .HasComment("姓名");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("手機號碼");
            entity.Property(e => e.Status).HasComment("狀態(0:停用,1:啟用)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.DeliveryStatus).HasComment("運送狀態(0:未出貨,1:已出貨,2:已送達)");
            entity.Property(e => e.PaymentStatus).HasComment("付款狀態(0:未付款,1:已付款)");
            entity.Property(e => e.Price).HasComment("成交價格");
            entity.Property(e => e.Quantity).HasComment("數量");
            entity.Property(e => e.ShippingAddress)
                .HasMaxLength(150)
                .HasComment("運送地址");
            entity.Property(e => e.ShippingMethod).HasComment("運送方式(1:超商,2:宅配)");
            entity.Property(e => e.Status).HasComment("訂單狀態(0:已取消,1:處理中,2:已完成)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.GroupBuying).WithMany(p => p.Orders)
                .HasForeignKey(d => d.GroupBuyingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_GroupBuyings");

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Members");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Info)
                .HasMaxLength(3000)
                .HasComment("商品資訊");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200)
                .HasComment("商品名稱");
            entity.Property(e => e.Price).HasComment("原價");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.Shop).WithMany(p => p.Products)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Shops");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Path)
                .IsRequired()
                .HasMaxLength(500)
                .HasComment("圖片路徑");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProductImages_Products");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("角色名稱");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<RoleFunctionRel>(entity =>
        {
            entity.ToTable("Role_Function_Rel");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Function).WithMany(p => p.RoleFunctionRels)
                .HasForeignKey(d => d.FunctionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Role_Function_Rel_Functions");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RoleFunctionRel)
                .HasForeignKey<RoleFunctionRel>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Role_Function_Rel_Roles");
        });

        modelBuilder.Entity<Shop>(entity =>
        {
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("帳號");
            entity.Property(e => e.Address)
                .HasMaxLength(150)
                .HasComment("商店地址");
            entity.Property(e => e.Avatar)
                .HasMaxLength(500)
                .HasComment("頭像");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.EncryptedPassword)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("加密後密碼");
            entity.Property(e => e.IdentityCard)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("身分證字號");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("商店名稱");
            entity.Property(e => e.Status).HasComment("狀態(0:停用,1:啟用)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Wish>(entity =>
        {
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.Wishes)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wishes_Members");

            entity.HasOne(d => d.Product).WithMany(p => p.Wishes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Wishes_Products");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}